@model IEnumerable<GameOfThronePool.Models.UserCharacterSelection>
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string username = @UserManager.GetUserName(User);
    var userEntity = await @UserManager.FindByNameAsync(username);
    string name = (userEntity.UserFriendlyName != null) ? userEntity.UserFriendlyName : username;

}

<h2>My Deathpool</h2>
<div class="jumbotron">
    <h3>
        @name, Setup your Deathpool Predictions!<br /> You can change these until <font color="yellow">April 17th, 2019</font>
    </h3>
</div>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CharacterName)
            </th>
            <th>
                Alive or Dead by the last Episode?
            </th>
            <th>
                Do they become a White Walker?
            </th>            
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CharacterName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AliveStatus)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BecomesAWhiteWalker)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.UserCharacterSelectionID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.UserCharacterSelectionID">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.UserCharacterSelectionID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
