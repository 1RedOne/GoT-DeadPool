@model List<GameOfThronePool.Models.UserCharacterSelection>
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string username = @UserManager.GetUserName(User);
    var userEntity = await @UserManager.FindByNameAsync(username);
    string name = (userEntity.UserFriendlyName != null) ? userEntity.UserFriendlyName : username;

}
<style>
    h2, h3, body, jumbotron {
        font-family: OFL Sorts Mill Goudy, Noto Nastaliq Urdu, My Noto Nastaliq Urdu, Georgia, serif;
    }

    .alive {
        color: darkolivegreen;
        text-shadow: 2px 2px 4px #000000;
    }

    .dead {
        color: darkred;
        text-shadow: 2px 2px 4px #000000;
    }

    .whitewalker {
        color: darkslateblue;
        text-shadow: 2px 2px 4px #FFFFFF;
    }
</style>
<br />

<h2>My Deathpool</h2>
<div class="jumbotron">
    <h3>
        @name, use this space to setup your Deathpool Predictions!<br /> You can change these until <font color="yellow">April 17th, 2019</font>
    </h3>
</div>

@using (@Html.BeginForm("PostUpdate", "DeadPoolSelection"))
{
    <table class="table">
        <tr>
            <th>
                Character Name
            </th>
            <th>
                Alive or Dead by the last Episode?
            </th>
            <th>
                Do they become a White Walker?
            </th>
            <th></th>
        </tr>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.HiddenFor(modelItem => item.UserCharacterSelectionID, new { @Name = "[" + item.UserCharacterSelectionID + "]_UserCharacterSelectionID" })
                    @Html.HiddenFor(modelItem => item.CharacterID, new { @Name = "[" + item.UserCharacterSelectionID + "]_CharacterID" })
                    @Html.DisplayFor(modelItem => item.CharacterName, new { @Name = "[" + item.UserCharacterSelectionID + "]_CharacterName" })
                </td>
                <td>
                    @if (item.AliveStatus)
                    {<div class="alive">Alive</div> }
                    else
                    { <div class="dead">Dead</div>}
                </td>
                <td>
                    @if (item.BecomesAWhiteWalker)
                    {<div class="whitewalker">Wight</div> }
                    else
                    { <div class="dead">☠</div>}
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.UserCharacterSelectionID">Edit</a>
                </td>
            </tr>
        }

    </table>

    <p style="color:green; font-size:12px;">@ViewBag.Message</p>
}
@await Component.InvokeAsync("MyBonusQuestions", new { UserName = User})


